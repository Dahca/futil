// #  ifdef MINI_DATASET
// #   define NI 16
// #   define NJ 18
// #   define NK 22
// #   define NL 24
// #  endif

// #  ifdef SMALL_DATASET
// #   define NI 40
// #   define NJ 50
// #   define NK 70
// #   define NL 80
// #  endif

// #  ifdef MEDIUM_DATASET
// #   define NI 180
// #   define NJ 190
// #   define NK 210
// #   define NL 220
// #  endif

// #  ifdef LARGE_DATASET
// #   define NI 800
// #   define NJ 900
// #   define NK 1100
// #   define NL 1200
// #  endif

// #  ifdef EXTRALARGE_DATASET
// #   define NI 1600
// #   define NJ 1800
// #   define NK 2200
// #   define NL 2400
// #  endif

// BEGIN macro definition










// END macro definition

decl alpha: ubit<32>[1];
decl beta: ubit<32>[1];
decl tmp: ubit<32>[8][8];
decl A: ubit<32>[8][8];
decl B: ubit<32>[8][8];
decl C: ubit<32>[8][8];
decl D: ubit<32>[8][8];

for (let i: ubit<4> = 0..8) {
  for (let j: ubit<4> = 0..8) {
    tmp[i][j] := (0 as ubit<32>);
    ---
    for (let k: ubit<4> = 0..8) {
      let v: ubit<32> = alpha[(0 as ubit<1>)] * A[i][k] * B[k][j]
    } combine {
      tmp[i][j] += v;
    }
  }
}

---

for (let i: ubit<4> = 0..8) {
  for (let j: ubit<4> = 0..8) {
    let d_tmp: ubit<32> = D[i][j];
    ---
    D[i][j] := beta[(0 as ubit<1>)] * d_tmp;
    ---
    for (let k1: ubit<4> = 0..8) {
      let v1: ubit<32> = tmp[i][k1] * C[k1][j]
    } combine {
      D[i][j] += v1;
    }
  }
}
