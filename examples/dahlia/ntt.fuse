decl real: ubit<32>[1024];
decl img: ubit<32>[1024];
decl real_twid: ubit<32>[512];
decl img_twid: ubit<32>[512];
decl mod_number: ubit<32>[1];
decl root: ubit<32>[1];
decl powers: ubit<32>[512];

let span: ubit<32> = 512;
let log: ubit<32> = 0;

let pow: ubit<32> = 1;
let i: ubit<32> = 0;

while (i != 512) {
  powers[i] := pow;
  pow := pow * root[0] % mod_number[0];
  i := i + 1;
}

---

while (span != 0) {
  let odd = span;
  while (odd < 1024) {
    odd := odd | span;
    let even = odd ^ span;
    let real_odd = real[odd];
    let img_odd = img[odd];
    ---
    let real_even = real[even];
    let img_even = img[even];
    let temp_r = real_even + real_odd;
    let temp_i = img_even + img_odd;
    ---
    real[odd] := real_even - real_odd;
    img[odd] := img_even - img_odd;
    ---
    real[even] := temp_r;
    img[even] := temp_i;
    let rootindex = (even << log) & (1023 as ubit<32>);
    ---
    if (rootindex != 0) {
      img_odd := img[odd] * powers[rootindex] % mod_number[0];
      let temp = (real_twid[rootindex] * real[odd] - img_twid[rootindex] *
          img_odd + mod_number[0]) % mod_number[0];
      ---
      img[odd] := (real_twid[rootindex] * img_odd + img_twid[rootindex] *
          real[odd]) % mod_number[0];
      ---
      real[odd] := temp;
    }
    odd := odd + 1;
  }
  span := span >> 1;
  log := log + 1;
}
